
# Logo Detection in Videos

This project leverages a pre-trained deep learning model to detect logos in videos. The system processes video frames, classifies them as having or not having a logo, and organizes the videos into appropriate folders based on the detection results. The project uses TensorFlow for model inference and OpenCV for real-time video processing.

## Features

- **Logo Detection**: Classifies whether a logo is present in each video.
- **Real-time Processing**: Processes each video frame and applies the pre-trained model to detect logos.
- **Video Organization**: Sorts videos into `with_logo` and `without_logo` folders based on detection results.
- **Efficient Frame Skipping**: Skips frames to speed up processing, reducing computational load.
- **Screenshots**: Optionally saves screenshots when a logo is detected (commented out in the script).

## Prerequisites

Ensure you have the following Python libraries installed:

- Python 3.7 or higher
- TensorFlow
- OpenCV
- NumPy

You can install the required libraries using `pip`:

```bash
pip install tensorflow opencv-python numpy
```

## Project Structure

```
logo_detection_project/
├── main.py                   # Main script for logo detection and video classification
├── logo_detection_model_1.h5  # Pre-trained model for logo detection (adjust path as needed)
├── README.md                 # Project documentation
└── screenshots/              # Folder for saving screenshots (optional)
```

- **`logo_detection_model_1.h5`**: The pre-trained model file used for logo detection.
- **`main.py`**: Main Python script that handles video processing and classification.
- **`screenshots/`**: Folder where screenshots are saved when a logo is detected (can be enabled in the code).

## Model Details

The model is a pre-trained deep learning model that classifies frames from videos as containing a logo or not. The model was trained to recognize logos and is used for inference in this project.

- **Model Type**: Binary classification (logo vs. no logo).
- **Input Size**: The model expects input frames of size `(150, 150, 3)`.
- **Output**: The model outputs a confidence score between 0 and 1. If the score exceeds a threshold (default: 0.9), the frame is classified as containing a logo.

## How It Works

### 1. **Preprocessing the Frame**
Each frame of the video is resized to `150x150` pixels and normalized to a range between 0 and 1. This ensures the input format matches what the model expects.

### 2. **Logo Detection**
The system processes each video frame and uses the pre-trained model to predict whether a logo is present. If the model’s confidence exceeds the defined threshold (default: 0.9), the frame is marked as having a logo.

### 3. **Frame Skipping for Efficiency**
To speed up the process, the system skips a configurable number of frames (default: 5). This reduces redundant processing, especially in videos with little motion.

### 4. **Classifying and Sorting Videos**
Once a video is processed, the script moves the video to one of the following folders based on the detection results:
- `with_logo/`: Contains videos where logos were detected.
- `without_logo/`: Contains videos where no logos were detected.

### 5. **Screenshots (Optional)**
If logo detection is enabled, the system can save screenshots when a logo is detected. These screenshots are saved in the `screenshots/` directory for later review.

## Usage

### Step 1: Update Paths
Before running the script, ensure the correct paths to the video files and the pre-trained model are set in the `main.py` file. 

Example:
```python
model = tf.keras.models.load_model('path_to_your_model/logo_detection_model_1.h5')  # Adjust the path
```

### Step 2: Run the Script

Run the script from the command line:

```bash
python main.py
```

You will be prompted to enter the path to the folder containing the videos and the path to the output folder where results will be saved.

### Step 3: Observe the Output

- The script will process each video and print the classification results.
- Videos will be moved to either the `with_logo` or `without_logo` folder based on the detection results.

### Step 4: View Detection Results

Detection results for each video are displayed in the console. For each frame where a logo is detected, the following information will be displayed:
- **Class ID**: The ID of the detected class (logo vs. no logo).
- **Start Time**: The timestamp (in seconds) when the logo was detected.
- **Duration**: Duration for which the logo was detected.
- **Confidence**: The confidence score for the logo detection.

### Example Output:

```
Processing video: C:/path/to/video.mp4
Logo detected in video: video.mp4
Detected Logo Class ID: 1, Start Time: 12.34s, Duration: 2s, Confidence: 0.92
Screenshot saved: C:/path/to/screenshots/video_class_1_time_12.34.png
```

### Step 5: Video Organization

Based on the detection results:
- Videos with logos will be moved to the `with_logo/` folder.
- Videos without logos will be moved to the `without_logo/` folder.

## Screenshots

When a logo is detected, you can uncomment the `save_screenshot` function call in the `process_video` function to save screenshots of the frames where logos are detected. These screenshots will be saved in the `screenshots/` folder.

```python
# Uncomment to enable screenshot saving
# save_screenshot(frame, class_id, current_time, os.path.basename(video_path), os.path.dirname(video_path))
```

## Troubleshooting

- **Incorrect video path**: Ensure the video folder path is correct and contains valid video files.
- **Missing model file**: Ensure the model file (`logo_detection_model_1.h5`) is located at the specified path.
- **OpenCV issues**: If the video window does not display properly, verify your OpenCV installation and graphics drivers.

## License

This project is licensed under the MIT License.

## Acknowledgments

- **TensorFlow**: For the deep learning framework used to train and deploy the logo detection model.
- **OpenCV**: For enabling real-time video processing and manipulation.
- **NumPy**: For handling numerical operations in frame processing.

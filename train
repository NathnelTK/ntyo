import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import numpy as np
import cv2
import matplotlib.pyplot as plt

IMG_HEIGHT, IMG_WIDTH = 150, 150


# Load your dataset (replace with your dataset directory paths)
train_dir = "C:/Users/Administrator/Desktop/ads detection/train-image"
#val_dir = "C:/Users/Administrator/Desktop/utube/validation-image"

# Preprocess the data with ImageDataGenerator
train_datagen = ImageDataGenerator(rescale=1.0/255.0, 
                                   rotation_range=20, 
                                   width_shift_range=0.2, 
                                   height_shift_range=0.2, 
                                   shear_range=0.2, 
                                   zoom_range=0.2, 
                                   horizontal_flip=True, 
                                   fill_mode='nearest')

train_generator = train_datagen.flow_from_directory(
    train_dir, 
    target_size=(IMG_HEIGHT, IMG_WIDTH), 
    batch_size=32, 
    class_mode='categorical')  # Ensure categorical classification


# Define the model architecture
model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(IMG_HEIGHT, IMG_WIDTH, 3)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(128, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    
    layers.Dense(128, activation='relu'),
    
    layers.Dense(2, activation='softmax')  # Output layer for categorical classification with 2 units
])

# Compile the model
model.compile(loss='categorical_crossentropy',  # Appropriate loss for multi-class classification
              optimizer='adam',
              metrics=['accuracy'])

history = model.fit(train_generator, epochs=10)

# Save the trained model
model.save('logo_detection_model_1.h5')
